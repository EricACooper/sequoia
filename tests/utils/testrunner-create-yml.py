
import sys

import json
import string
import time
from optparse import OptionParser
import traceback

from couchbase import Couchbase
from couchbase.bucket import Bucket
from couchbase.exceptions import CouchbaseError
from couchbase.n1ql import N1QLQuery

import yaml

"""
  Takes as input the set of testrunner test suites to be run and creates the yml file to be run under sequoia

  e.g.
     python testrunner-create-yml.py -r 12hour           # all test suites in the 12 hour regression
     python testrunner-create-yml.py -r 12hour -c epeng  # all ep engine test suites in the 12 hour regression

"""


TEST_SUITE_DB = '172.23.105.177'


def getNumberOfServers( iniFile):
    f = open(iniFile)
    contents = f.read()
    f.close()
    return contents.count('dynamic')


def getTests(run, component, subcomponent):

    result = []
    cb = Bucket('couchbase://' + TEST_SUITE_DB + '/QE-Test-Suites')

    if component is None:
        queryString = "select * from `QE-Test-Suites` where '" + run + "' in partOf order by component"
    else:
        if subcomponent is None :
            splitComponents = component.split(',')
            componentString = ''
            for i in range( len(splitComponents) ):
                componentString = componentString + "'" + splitComponents[i] + "'"
                if i < len(splitComponents) - 1:
                    componentString = componentString + ','


            queryString = "select * from `QE-Test-Suites` where \"{0}\" in partOf and component in [{1}] order by component;".format(run, componentString)

        else:
            # have a subcomponent, assume only 1 component
            queryString = "select * from `QE-Test-Suites` where \"{0}\" in partOf and component in ['{1}'] and subcomponent ='{2}';".\
                format(run, component, subcomponent)


    print 'the query is', queryString #.format(options.run, componentString)
    query = N1QLQuery(queryString )
    results = cb.n1ql_query( queryString )


    for row in results:
            data = row['QE-Test-Suites']
            print 'row', data
            result.append(data)

    return result

def main():

    usage = '%prog -r test-run [-c component [-s subcomponent]]'
    parser = OptionParser(usage)
    parser.add_option('-r','--run', dest='run')
    parser.add_option('-c','--component', dest='component', default=None)
    parser.add_option('-t','--test', dest='test', default=False, action='store_true')
    parser.add_option('-s','--subcomponent', dest='subcomponent', default=None)


    options, args = parser.parse_args()




    testsToLaunch = getTests(options.run, options.component, options.subcomponent)

    # print the header
    """
      - wait: false
     - test:
     container: testrunner
     command: "/testrunner -i n1ql.ini -c conf/2i/py-clusterops.conf -p doc-per-day=1,get-cbcollect-info=False,gsi_type=forestdb"
     servers: 0:0-3  # explicit index matching  (safest)
     """
    print '### autogenerated request for ', options.run, 'create at', time.ctime()
    print options.run,':'
    print ' - wait: false'





    print 'tests to launch:'
    for i in testsToLaunch:
        print '- test:'
        print '  container: testrunner'
        commandLine=  'command: /testrunner -i {0} -c {1}'.format(i['config'], i['confFile'])
        if 'parameters' in i and i['parameters'] != 'None':
            commandLine += ' -p ' + i['parameters']
        print ' ', commandLine
        print '  servers: ??:??'

        #print yaml.dump(i)
    print '\n\n'



if __name__ == "__main__":
    main()

